import { supabase } from '../lib/supabase';
import { getCompleteVehicleData, getLatestVehiclesFromSheet } from '../lib/google-sheets';

export interface SyncResult {
  success: boolean;
  message: string;
  addedCount: number;
  updatedCount: number;
  errors: string[];
}

// Yardƒ±mcƒ± fonksiyon: Upsert (insert or update) for sub-tables
async function upsertSubTable(table: string, vehicle_id: string, data: any, errors: string[]) {
  if (!data || Object.keys(data).length === 0) return;
  try {
    // Bo≈ü string olan alanlarƒ± null'a √ßevir
    const filteredData: any = {};
    Object.entries(data).forEach(([key, value]) => {
      if (value === "") {
        // Eƒüer alan timestamp ise null yap, diƒüerlerini de null yap
        filteredData[key] = null;
      } else {
        filteredData[key] = value;
      }
    });
    // Her tabloda vehicle_id foreign key olarak var
    const { error } = await supabase
      .from(table)
      .upsert({ vehicle_id, ...filteredData }, { onConflict: 'vehicle_id' });
    if (error) {
      errors.push(`${table} tablosuna eklenirken hata (${vehicle_id}): ${error.message}`);
    }
  } catch (err: any) {
    errors.push(`${table} tablosuna eklenirken hata (${vehicle_id}): ${err.message}`);
  }
}

// Images tablosu i√ßin √∂zel fonksiyon - her resim i√ßin ayrƒ± satƒ±r
async function upsertImages(vehicle_id: string, images: string[], errors: string[]) {
  if (!images || images.length === 0) return;
  
  try {
    // √ñnce bu ara√ß i√ßin mevcut resimleri sil
    const { error: deleteError } = await supabase
      .from('images')
      .delete()
      .eq('vehicle_id', vehicle_id);
    
    if (deleteError) {
      errors.push(`Images silinirken hata (${vehicle_id}): ${deleteError.message}`);
      return;
    }
    
    // Her resim i√ßin yeni satƒ±r ekle
    const imageRows = images.map(url => ({
      vehicle_id,
      url: url.trim()
    }));
    
    const { error: insertError } = await supabase
      .from('images')
      .insert(imageRows);
    
    if (insertError) {
      errors.push(`Images eklenirken hata (${vehicle_id}): ${insertError.message}`);
    }
  } catch (err: any) {
    errors.push(`Images i≈ülenirken hata (${vehicle_id}): ${err.message}`);
  }
}

// Features tablosu i√ßin √∂zel fonksiyon - her √∂zellik i√ßin ayrƒ± satƒ±r
async function upsertFeatures(vehicle_id: string, features: string[], extraFeatures: string[], errors: string[]) {
  if ((!features || features.length === 0) && (!extraFeatures || extraFeatures.length === 0)) return;
  
  try {
    // √ñnce bu ara√ß i√ßin mevcut √∂zellikleri sil
    const { error: deleteError } = await supabase
      .from('features')
      .delete()
      .eq('vehicle_id', vehicle_id);
    
    if (deleteError) {
      errors.push(`Features silinirken hata (${vehicle_id}): ${deleteError.message}`);
      return;
    }
    
    // Normal √∂zellikler
    const normalFeatures = features?.map(name => ({
      vehicle_id,
      name: name.trim(),
      is_extra: false
    })) || [];
    
    // Ekstra √∂zellikler
    const extraFeatureRows = extraFeatures?.map(name => ({
      vehicle_id,
      name: name.trim(),
      is_extra: true
    })) || [];
    
    // T√ºm √∂zellikleri birle≈ütir
    const allFeatures = [...normalFeatures, ...extraFeatureRows];
    
    if (allFeatures.length > 0) {
      const { error: insertError } = await supabase
        .from('features')
        .insert(allFeatures);
      
      if (insertError) {
        errors.push(`Features eklenirken hata (${vehicle_id}): ${insertError.message}`);
      }
    }
  } catch (err: any) {
    errors.push(`Features i≈ülenirken hata (${vehicle_id}): ${err.message}`);
  }
}

// Google Sheets'ten Supabase'e tam senkronizasyon
export const syncAllVehiclesFromSheet = async (): Promise<SyncResult> => {
  const result: SyncResult = {
    success: false,
    message: '',
    addedCount: 0,
    updatedCount: 0,
    errors: []
  };

  try {
    console.log('üîÑ Tam senkronizasyon ba≈ülatƒ±lƒ±yor...');
    
    // Google Sheets'ten t√ºm verileri √ßek (√ßoklu sheet)
    const sheetData = await getCompleteVehicleData();
    const { vehicles, chargingTimes, performances, dimensions, efficiencies, comforts, features, prices, turkeyStatuses, images, environmentalImpacts, warranties } = sheetData;
    
    if (vehicles.length === 0) {
      result.message = 'Google Sheets\'te veri bulunamadƒ±';
      return result;
    }

    console.log(`üìä ${vehicles.length} ara√ß verisi i≈üleniyor...`);

    // Supabase'deki mevcut ara√ßlarƒ± √ßek
    const { data: existingVehicles, error: fetchError } = await supabase
      .from('electric_vehicles')
      .select('id');

    if (fetchError) {
      result.errors.push(`Mevcut ara√ßlar √ßekilirken hata: ${fetchError.message}`);
      return result;
    }

    const existingVehicleIds = new Set(existingVehicles?.map(v => v.id) || []);

    for (const vehicle of vehicles) {
      try {
        if (!vehicle.id || !vehicle.brand || !vehicle.model) {
          result.errors.push(`Ge√ßersiz ara√ß verisi: ${JSON.stringify(vehicle)}`);
          continue;
        }

        // Ana tabloya ekle/g√ºncelle
        const vehicleData = {
          brand: vehicle.brand,
          model: vehicle.model,
          year: vehicle.year || 2024,
          type: vehicle.type || 'Sedan',
          range: vehicle.range || 0,
          battery_capacity: vehicle.battery_capacity || 0,
          heat_pump: vehicle.heat_pump || 'no',
          v2l: vehicle.v2l || 'no',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };

        if (existingVehicleIds.has(vehicle.id)) {
          // Mevcut aracƒ± g√ºncelle
          const { error: updateError } = await supabase
            .from('electric_vehicles')
            .update({ ...vehicleData, updated_at: new Date().toISOString() })
            .eq('id', vehicle.id);
          if (updateError) {
            result.errors.push(`Ara√ß g√ºncellenirken hata (${vehicle.id}): ${updateError.message}`);
          } else {
            result.updatedCount++;
          }
        } else {
          // Yeni ara√ß ekle
          const { error: insertError } = await supabase
            .from('electric_vehicles')
            .insert({ id: vehicle.id, ...vehicleData });
          if (insertError) {
            result.errors.push(`Ara√ß eklenirken hata (${vehicle.id}): ${insertError.message}`);
          } else {
            result.addedCount++;
          }
        }

        // Alt tablolara ekle/g√ºncelle
        await upsertSubTable('charging_times', vehicle.id, chargingTimes[vehicle.id], result.errors);
        await upsertSubTable('performances', vehicle.id, performances[vehicle.id], result.errors);
        await upsertSubTable('dimensions', vehicle.id, dimensions[vehicle.id], result.errors);
        await upsertSubTable('efficiencies', vehicle.id, efficiencies[vehicle.id], result.errors);
        await upsertSubTable('comforts', vehicle.id, comforts[vehicle.id], result.errors);
        await upsertSubTable('prices', vehicle.id, prices[vehicle.id], result.errors);
        await upsertSubTable('warranties', vehicle.id, warranties[vehicle.id], result.errors);
        await upsertSubTable('turkey_statuses', vehicle.id, turkeyStatuses[vehicle.id], result.errors);
        await upsertSubTable('environmental_impacts', vehicle.id, environmentalImpacts[vehicle.id], result.errors);
        
        // images ve features i√ßin √∂zel i≈üleme
        if (images[vehicle.id]?.images && Array.isArray(images[vehicle.id].images)) {
          await upsertImages(vehicle.id, images[vehicle.id].images, result.errors);
        }
        if (features[vehicle.id]?.features && Array.isArray(features[vehicle.id].features)) {
          await upsertFeatures(vehicle.id, features[vehicle.id].features, features[vehicle.id].extra_features || [], result.errors);
        }
      } catch (error) {
        result.errors.push(`Ara√ß i≈ülenirken hata (${vehicle.id}): ${error}`);
      }
    }

    result.success = true;
    result.message = `${result.addedCount} yeni ara√ß eklendi, ${result.updatedCount} ara√ß g√ºncellendi (t√ºm alt tablolar dahil)`;
    console.log(`üéâ Senkronizasyon tamamlandƒ±: ${result.message}`);
  } catch (error) {
    result.errors.push(`Genel senkronizasyon hatasƒ±: ${error}`);
    console.error('‚ùå Senkronizasyon hatasƒ±:', error);
  }
  return result;
};

// Sadece yeni eklenen ara√ßlarƒ± senkronize et
export const syncLatestVehiclesFromSheet = async (): Promise<SyncResult> => {
  const result: SyncResult = {
    success: false,
    message: '',
    addedCount: 0,
    updatedCount: 0,
    errors: []
  };

  try {
    console.log('‚ö° Hƒ±zlƒ± senkronizasyon ba≈ülatƒ±lƒ±yor...');
    
    // Google Sheets'ten son verileri √ßek
    const sheetData = await getLatestVehiclesFromSheet();
    const { vehicles, chargingTimes, performances, dimensions, efficiencies, comforts, features, prices, turkeyStatuses, images, environmentalImpacts, warranties } = sheetData;
    
    if (vehicles.length === 0) {
      result.message = 'Google Sheets\'te yeni veri bulunamadƒ±';
      return result;
    }

    console.log(`üìä ${vehicles.length} ara√ß verisi kontrol ediliyor...`);

    // Supabase'deki mevcut ara√ßlarƒ± √ßek
    const { data: existingVehicles, error: fetchError } = await supabase
      .from('electric_vehicles')
      .select('id');

    if (fetchError) {
      result.errors.push(`Mevcut ara√ßlar √ßekilirken hata: ${fetchError.message}`);
      return result;
    }

    const existingVehicleIds = new Set(existingVehicles?.map(v => v.id) || []);

    // Sadece yeni ara√ßlarƒ± ekle
    for (const vehicle of vehicles) {
      try {
        if (!vehicle.id || !vehicle.brand || !vehicle.model) {
          result.errors.push(`Ge√ßersiz ara√ß verisi: ${JSON.stringify(vehicle)}`);
          continue;
        }

        // Sadece yeni ara√ßlarƒ± ekle
        if (!existingVehicleIds.has(vehicle.id)) {
          const vehicleData = {
            id: vehicle.id,
          brand: vehicle.brand,
          model: vehicle.model,
          year: vehicle.year || 2024,
          type: vehicle.type || 'Sedan',
          range: vehicle.range || 0,
          battery_capacity: vehicle.battery_capacity || 0,
          heat_pump: vehicle.heat_pump || 'no',
          v2l: vehicle.v2l || 'no',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };

        const { error: insertError } = await supabase
          .from('electric_vehicles')
            .insert(vehicleData);

        if (insertError) {
          result.errors.push(`Ara√ß eklenirken hata (${vehicle.id}): ${insertError.message}`);
        } else {
          result.addedCount++;
          console.log(`‚ûï ${vehicle.brand} ${vehicle.model} eklendi`);
          }

          // Alt tablolara ekle
          await upsertSubTable('charging_times', vehicle.id, chargingTimes[vehicle.id], result.errors);
          await upsertSubTable('performances', vehicle.id, performances[vehicle.id], result.errors);
          await upsertSubTable('dimensions', vehicle.id, dimensions[vehicle.id], result.errors);
          await upsertSubTable('efficiencies', vehicle.id, efficiencies[vehicle.id], result.errors);
          await upsertSubTable('comforts', vehicle.id, comforts[vehicle.id], result.errors);
          await upsertSubTable('prices', vehicle.id, prices[vehicle.id], result.errors);
          await upsertSubTable('warranties', vehicle.id, warranties[vehicle.id], result.errors);
          await upsertSubTable('turkey_statuses', vehicle.id, turkeyStatuses[vehicle.id], result.errors);
          await upsertSubTable('environmental_impacts', vehicle.id, environmentalImpacts[vehicle.id], result.errors);
          
          // images ve features i√ßin √∂zel i≈üleme
          if (images[vehicle.id]?.images && Array.isArray(images[vehicle.id].images)) {
            await upsertImages(vehicle.id, images[vehicle.id].images, result.errors);
          }
          if (features[vehicle.id]?.features && Array.isArray(features[vehicle.id].features)) {
            await upsertFeatures(vehicle.id, features[vehicle.id].features, features[vehicle.id].extra_features || [], result.errors);
          }
        }
      } catch (error) {
        result.errors.push(`Ara√ß i≈ülenirken hata (${vehicle.id}): ${error}`);
      }
    }

    result.success = true;
    result.message = `${result.addedCount} yeni ara√ß eklendi`;

    console.log(`üéâ Hƒ±zlƒ± senkronizasyon tamamlandƒ±: ${result.message}`);

  } catch (error) {
    result.errors.push(`Genel senkronizasyon hatasƒ±: ${error}`);
    console.error('‚ùå Senkronizasyon hatasƒ±:', error);
  }

  return result;
};

// Belirli bir aracƒ± ID'ye g√∂re senkronize et
export const syncVehicleById = async (vehicleId: string): Promise<SyncResult> => {
  const result: SyncResult = {
    success: false,
    message: '',
    addedCount: 0,
    updatedCount: 0,
    errors: []
  };

  try {
    console.log(`üîç Ara√ß senkronizasyonu ba≈ülatƒ±lƒ±yor: ${vehicleId}`);
    
    // Google Sheets'ten t√ºm verileri √ßek
    const sheetData = await getCompleteVehicleData();
    const { vehicles, chargingTimes, performances, dimensions, efficiencies, comforts, features, prices, turkeyStatuses, images, environmentalImpacts, warranties } = sheetData;
    
    console.log(`üìä Google Sheets'ten ${vehicles.length} ara√ß √ßekildi`);
    
    // Belirli ID'ye sahip aracƒ± bul
    const targetVehicle = vehicles.find(v => v.id === vehicleId);
    
    if (!targetVehicle) {
      console.log(`‚ùå ID ${vehicleId} ile ara√ß Google Sheets'te bulunamadƒ±`);
      console.log('üìã Mevcut ara√ß ID\'leri:', vehicles.map(v => v.id).slice(0, 10));
      result.message = `ID ${vehicleId} ile ara√ß Google Sheets'te bulunamadƒ±. Mevcut ID'ler: ${vehicles.map(v => v.id).slice(0, 5).join(', ')}...`;
      return result;
    }

    console.log(`‚úÖ Ara√ß bulundu: ${targetVehicle.brand} ${targetVehicle.model}`);

    // Supabase'de ara√ß var mƒ± kontrol et
    const { data: existingVehicle, error: fetchError } = await supabase
      .from('electric_vehicles')
      .select('id')
      .eq('id', vehicleId)
      .single();

    if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 = not found
      result.errors.push(`Ara√ß kontrol edilirken hata: ${fetchError.message}`);
      return result;
    }

    // Sadece veritabanƒ±nda mevcut olan s√ºtunlarƒ± kullan
    const vehicleData = {
      brand: targetVehicle.brand,
      model: targetVehicle.model,
      year: targetVehicle.year || 2024,
      type: targetVehicle.type || 'Sedan',
      range: targetVehicle.range || 0,
      battery_capacity: targetVehicle.battery_capacity || 0,
      heat_pump: targetVehicle.heat_pump || 'no',
      v2l: targetVehicle.v2l || 'no',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    if (existingVehicle) {
      console.log(`üîÑ Mevcut ara√ß g√ºncelleniyor: ${vehicleId}`);
      // Mevcut aracƒ± g√ºncelle
      const { error: updateError } = await supabase
        .from('electric_vehicles')
        .update({
          ...vehicleData,
          updated_at: new Date().toISOString()
        })
        .eq('id', vehicleId);

      if (updateError) {
        console.error(`‚ùå Ara√ß g√ºncellenirken hata: ${updateError.message}`);
        result.errors.push(`Ara√ß g√ºncellenirken hata: ${updateError.message}`);
      } else {
        result.updatedCount = 1;
        result.success = true;
        result.message = 'Ara√ß ba≈üarƒ±yla g√ºncellendi';
        console.log(`‚úÖ ${targetVehicle.brand} ${targetVehicle.model} g√ºncellendi`);
      }
    } else {
      console.log(`‚ûï Yeni ara√ß ekleniyor: ${vehicleId}`);
      // Yeni ara√ß ekle
      const { error: insertError } = await supabase
        .from('electric_vehicles')
        .insert({
          id: vehicleId,
          ...vehicleData
        });

      if (insertError) {
        console.error(`‚ùå Ara√ß eklenirken hata: ${insertError.message}`);
        result.errors.push(`Ara√ß eklenirken hata: ${insertError.message}`);
      } else {
        result.addedCount = 1;
        result.success = true;
        result.message = 'Ara√ß ba≈üarƒ±yla eklendi';
        console.log(`‚ûï ${targetVehicle.brand} ${targetVehicle.model} eklendi`);
      }
    }

    // Alt tablolara ekle/g√ºncelle
    await upsertSubTable('charging_times', vehicleId, chargingTimes[vehicleId], result.errors);
    await upsertSubTable('performances', vehicleId, performances[vehicleId], result.errors);
    await upsertSubTable('dimensions', vehicleId, dimensions[vehicleId], result.errors);
    await upsertSubTable('efficiencies', vehicleId, efficiencies[vehicleId], result.errors);
    await upsertSubTable('comforts', vehicleId, comforts[vehicleId], result.errors);
    await upsertSubTable('prices', vehicleId, prices[vehicleId], result.errors);
    await upsertSubTable('warranties', vehicleId, warranties[vehicleId], result.errors);
    await upsertSubTable('turkey_statuses', vehicleId, turkeyStatuses[vehicleId], result.errors);
    await upsertSubTable('environmental_impacts', vehicleId, environmentalImpacts[vehicleId], result.errors);
    
    // images ve features i√ßin √∂zel i≈üleme
    if (Array.isArray(images[vehicleId]) && images[vehicleId].length > 0) {
      // Her image objesinde url varsa, url'leri diziye √ßevir
      const imageUrls = images[vehicleId].map((img: any) => img.url).filter(Boolean);
      await upsertImages(vehicleId, imageUrls, result.errors);
    }
    if (Array.isArray(features[vehicleId]) && features[vehicleId].length > 0) {
      // √ñzellikleri is_extra'ya g√∂re ayƒ±r
      const normalFeatures = features[vehicleId].filter((f: any) => f.is_extra !== 'true').map((f: any) => f.name).filter(Boolean);
      const extraFeatures = features[vehicleId].filter((f: any) => f.is_extra === 'true').map((f: any) => f.name).filter(Boolean);
      await upsertFeatures(vehicleId, normalFeatures, extraFeatures, result.errors);
    }

  } catch (error) {
    console.error('‚ùå Ara√ß senkronizasyon hatasƒ±:', error);
    result.errors.push(`Ara√ß senkronizasyon hatasƒ±: ${error}`);
  }

  return result;
}; 